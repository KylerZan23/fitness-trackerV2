/**
 * Coach Neural Type System
 * 
 * This type system replaces the complex program generation functionality
 * with a simplified, flexible neural-based approach that provides
 * personalized training recommendations through AI.
 */

/**
 * User onboarding data for neural analysis
 */
export interface OnboardingData {
  /** Primary training focus */
  primaryFocus: 'hypertrophy' | 'strength' | 'general_fitness';
  
  /** User's experience level */
  experienceLevel: 'beginner' | 'intermediate' | 'advanced';
  
  /** Preferred session duration in minutes */
  sessionDuration: 30 | 45 | 60 | 90;
  
  /** Available equipment access */
  equipmentAccess: 'full_gym' | 'dumbbells_only' | 'bodyweight_only';
  
  /** Optional personal records for strength assessment */
  personalRecords?: {
    /** Squat 1RM in user's preferred unit */
    squat?: number;
    /** Bench press 1RM in user's preferred unit */
    bench?: number;
    /** Deadlift 1RM in user's preferred unit */
    deadlift?: number;
  };
  
  /** Additional context information */
  additionalInfo?: {
    /** Previous injury history */
    injuryHistory?: string;
    /** Training preferences (e.g., "compound movements", "high intensity") */
    preferences?: string[];
    /** Available training days per week */
    availableDays?: number;
  };
}

/**
 * Extended onboarding data returned after program generation
 */
export interface OnboardingCompletionData extends OnboardingData {
  /** Persistent program ID from database */
  programId?: string;
  /** Full program object (available after generation) */
  program?: TrainingProgram;
  /** Timestamp when program was created */
  createdAt?: string;
}

/**
 * Individual exercise within a workout
 */
export interface Exercise {
  /** Unique exercise identifier */
  id: string;
  
  /** Exercise name (e.g., "Barbell Squat", "Push-ups") */
  name: string;
  
  /** Primary muscle groups targeted */
  targetMuscles: string[];
  
  /** Number of sets to perform */
  sets: number;
  
  /** Rep range (e.g., "8-12" or "6-8") */
  reps: string;
  
  /** Load specification (e.g., "15-20lb" or "bodyweight") */
  load: string;
  
  /** Rest period between sets (e.g., "90 seconds") */
  rest: string;
  
  /** Rate of Perceived Exertion target (e.g., "7-8") */
  rpe: string;
  
  /** Optional coaching notes or form cues */
  notes?: string;
  
  /** Optional video demonstration URL */
  videoUrl?: string;
}

/**
 * Complete workout session
 */
export interface Workout {
  /** Unique workout identifier */
  id: string;
  
  /** Workout name (e.g., "Upper Body Power", "Full Body Strength") */
  name: string;
  
  /** Estimated duration in minutes */
  duration: number;
  
  /** Primary focus of the workout */
  focus: string;
  
  /** Warm-up exercises */
  warmup: Exercise[];
  
  /** Main training exercises */
  mainExercises: Exercise[];
  
  /** Optional finisher exercises */
  finisher?: Exercise[];
  
  /** Total estimated time including rest periods */
  totalEstimatedTime: number;
}

/**
 * Complete training program generated by Neural
 */
export interface TrainingProgram {
  /** Unique program identifier */
  id: string;
  
  /** User ID this program belongs to */
  userId: string;
  
  /** Descriptive program name */
  programName: string;
  
  /** Current week number in the program */
  weekNumber: number;
  
  /** Array of workouts for the current week */
  workouts: Workout[];
  
  /** Neural's progression strategy and notes */
  progressionNotes: string;
  
  /** Timestamp when the program was created */
  createdAt: Date;
  
  /** Neural's analysis and insights for this program */
  neuralInsights: string;
}

/**
 * Progress tracking data for neural analysis
 */
export interface ProgressData {
  /** Strength improvements tracked over time */
  strengthProgress?: {
    /** Exercise name to progress mapping */
    [exerciseName: string]: {
      /** Previous best performance */
      previousBest: number;
      /** Current performance */
      current: number;
      /** Performance unit (kg, lbs, reps, etc.) */
      unit: string;
      /** Date of measurement */
      measuredAt: Date;
    };
  };
  
  /** Subjective feedback from recent workouts */
  workoutFeedback?: {
    /** Average fatigue level (1-10 scale) */
    averageFatigue: number;
    /** Average motivation level (1-10 scale) */
    averageMotivation: number;
    /** Recent workout completion rate (0-1) */
    completionRate: number;
    /** Number of workouts completed */
    workoutsCompleted: number;
  };
  
  /** Body composition changes if available */
  bodyComposition?: {
    /** Weight change in user's preferred unit */
    weightChange?: number;
    /** Body fat percentage change */
    bodyFatChange?: number;
    /** Measurement date */
    measuredAt: Date;
  };
  
  /** Sleep and recovery metrics */
  recoveryMetrics?: {
    /** Average sleep hours per night */
    averageSleepHours: number;
    /** Sleep quality rating (1-10) */
    sleepQuality: number;
    /** Stress level (1-10) */
    stressLevel: number;
  };
}

/**
 * Request payload for neural program generation
 */
export interface NeuralRequest {
  /** User's onboarding data and preferences */
  onboardingData: OnboardingData;
  
  /** Current week in the training cycle */
  currentWeek: number;
  
  /** Optional progress data for adaptive programming */
  previousProgress?: ProgressData;
}

/**
 * Response from neural program generation
 */
export interface NeuralResponse {
  /** Generated training program */
  program: TrainingProgram;
  
  /** Neural's reasoning for program design choices */
  reasoning: string;
  
  /** Detailed progression plan for upcoming weeks */
  progressionPlan: string;
  
  /** Preview of what to expect next week */
  nextWeekPreview: string;
}

/**
 * Neural coaching session for ongoing guidance
 */
export interface NeuralCoachingSession {
  /** Unique session identifier */
  id: string;
  
  /** User ID */
  userId: string;
  
  /** Session timestamp */
  sessionDate: Date;
  
  /** User's questions or concerns */
  userQuery: string;
  
  /** Neural's personalized response */
  neuralResponse: string;
  
  /** Session type */
  sessionType: 'program_review' | 'form_check' | 'progress_analysis' | 'motivation' | 'general';
  
  /** Any program adjustments recommended */
  programAdjustments?: {
    /** Exercises to modify */
    exerciseModifications?: Array<{
      exerciseId: string;
      modification: string;
      reason: string;
    }>;
    
    /** Intensity adjustments */
    intensityChanges?: string;
    
    /** Schedule modifications */
    scheduleChanges?: string;
  };
}

/**
 * User preferences and settings for Neural
 */
export interface NeuralUserSettings {
  /** User ID */
  userId: string;
  
  /** Preferred coaching style */
  coachingStyle: 'motivational' | 'analytical' | 'supportive' | 'direct';
  
  /** Communication frequency preferences */
  communicationPreferences: {
    /** How often to receive check-ins */
    checkInFrequency: 'daily' | 'weekly' | 'bi_weekly' | 'monthly';
    
    /** Preferred communication times */
    preferredTimes: string[];
    
    /** Notification settings */
    notifications: {
      workoutReminders: boolean;
      progressUpdates: boolean;
      motivationalMessages: boolean;
    };
  };
  
  /** Adaptive learning settings */
  adaptiveSettings: {
    /** How aggressively to adapt programs */
    adaptationRate: 'conservative' | 'moderate' | 'aggressive';
    
    /** Prioritize strength vs. hypertrophy adaptations */
    adaptationPriority: 'strength' | 'hypertrophy' | 'balanced';
    
    /** Auto-adjust based on performance */
    autoAdjustment: boolean;
  };
}

/**
 * Type guards for runtime type checking
 */
export function isNeuralRequest(obj: any): obj is NeuralRequest {
  return (
    obj &&
    typeof obj === 'object' &&
    obj.onboardingData &&
    typeof obj.currentWeek === 'number'
  );
}

export function isProgressData(obj: any): obj is ProgressData {
  return obj && typeof obj === 'object';
}

export function isExercise(obj: any): obj is Exercise {
  return (
    obj &&
    typeof obj === 'object' &&
    typeof obj.id === 'string' &&
    typeof obj.name === 'string' &&
    Array.isArray(obj.targetMuscles) &&
    typeof obj.sets === 'number'
  );
}

/**
 * Helper functions for working with Neural types
 */
export namespace NeuralHelpers {
  /**
   * Calculate total workout volume for progress tracking
   */
  export function calculateWorkoutVolume(workout: Workout): number {
    return workout.mainExercises.reduce((total, exercise) => {
      // Simple volume calculation: sets * average reps
      const avgReps = exercise.reps.includes('-') 
        ? exercise.reps.split('-').map(Number).reduce((a, b) => a + b, 0) / 2
        : parseInt(exercise.reps);
      
      return total + (exercise.sets * avgReps);
    }, 0);
  }
  
  /**
   * Estimate workout difficulty based on RPE and volume
   */
  export function estimateWorkoutDifficulty(workout: Workout): 'easy' | 'moderate' | 'hard' | 'very_hard' {
    const avgRpe = workout.mainExercises.reduce((total, exercise) => {
      const rpe = exercise.rpe.includes('-')
        ? exercise.rpe.split('-').map(Number).reduce((a, b) => a + b, 0) / 2
        : parseInt(exercise.rpe);
      return total + rpe;
    }, 0) / workout.mainExercises.length;
    
    const volume = calculateWorkoutVolume(workout);
    const difficulty = (avgRpe * 0.7) + (volume / 100 * 0.3);
    
    if (difficulty < 5) return 'easy';
    if (difficulty < 7) return 'moderate';
    if (difficulty < 8.5) return 'hard';
    return 'very_hard';
  }
  
  /**
   * Generate a simple program summary
   */
  export function summarizeProgram(program: TrainingProgram): string {
    const totalWorkouts = program.workouts.length;
    const avgDuration = program.workouts.reduce((total, w) => total + w.duration, 0) / totalWorkouts;
    const primaryFocus = program.workouts[0]?.focus || 'General';
    
    return `${program.programName}: ${totalWorkouts} workouts/week, ~${Math.round(avgDuration)} min each, ${primaryFocus} focus`;
  }
}
