-- Migration: Create training_programs table for AI-generated training programs
-- This table stores the complete training program data as JSONB with extracted fields for efficient querying

-- Create the training_programs table
CREATE TABLE IF NOT EXISTS public.training_programs (
    -- Primary key
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    
    -- Foreign key to auth.users (user who owns this program)
    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    
    -- Core program data stored as JSONB (TrainingProgram interface)
    program_details JSONB NOT NULL,
    
    -- Extracted fields for easier querying and indexing
    program_name TEXT,
    total_duration_weeks INTEGER,
    
    -- User-defined program scheduling
    start_date DATE,
    
    -- Program status and metadata
    is_active BOOLEAN NOT NULL DEFAULT true,
    generated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    ai_model_version TEXT,
    
    -- Snapshot of onboarding data used to generate this program
    -- Allows tracking how programs were generated and potential regeneration
    onboarding_data_snapshot JSONB,
    
    -- Timestamps
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Add comments for documentation
COMMENT ON TABLE public.training_programs IS 'Stores AI-generated training programs for users';
COMMENT ON COLUMN public.training_programs.id IS 'Unique identifier for the training program';
COMMENT ON COLUMN public.training_programs.user_id IS 'ID of the user who owns this program';
COMMENT ON COLUMN public.training_programs.program_details IS 'Complete training program data as JSONB (TrainingProgram interface)';
COMMENT ON COLUMN public.training_programs.program_name IS 'Extracted program name for easier querying';
COMMENT ON COLUMN public.training_programs.total_duration_weeks IS 'Extracted total duration for easier querying';
COMMENT ON COLUMN public.training_programs.start_date IS 'User-defined start date for the program';
COMMENT ON COLUMN public.training_programs.is_active IS 'Whether this program is currently active for the user';
COMMENT ON COLUMN public.training_programs.generated_at IS 'When the program was generated by AI';
COMMENT ON COLUMN public.training_programs.ai_model_version IS 'Version/name of the AI model used for generation';
COMMENT ON COLUMN public.training_programs.onboarding_data_snapshot IS 'Snapshot of user onboarding responses used to generate this program';

-- Create indexes for efficient querying
CREATE INDEX IF NOT EXISTS idx_training_programs_user_id ON public.training_programs(user_id);
CREATE INDEX IF NOT EXISTS idx_training_programs_is_active ON public.training_programs(is_active);
CREATE INDEX IF NOT EXISTS idx_training_programs_user_active ON public.training_programs(user_id, is_active);
CREATE INDEX IF NOT EXISTS idx_training_programs_generated_at ON public.training_programs(generated_at DESC);
CREATE INDEX IF NOT EXISTS idx_training_programs_start_date ON public.training_programs(start_date) WHERE start_date IS NOT NULL;

-- Create a GIN index on the JSONB program_details for efficient JSON queries
CREATE INDEX IF NOT EXISTS idx_training_programs_program_details_gin ON public.training_programs USING GIN(program_details);

-- Enable Row Level Security (RLS)
ALTER TABLE public.training_programs ENABLE ROW LEVEL SECURITY;

-- RLS Policy: Users can select their own training programs
CREATE POLICY "Users can view their own training programs" ON public.training_programs
    FOR SELECT
    TO authenticated
    USING (auth.uid() = user_id);

-- RLS Policy: Users can insert their own training programs
CREATE POLICY "Users can create their own training programs" ON public.training_programs
    FOR INSERT
    TO authenticated
    WITH CHECK (auth.uid() = user_id);

-- RLS Policy: Users can update their own training programs
CREATE POLICY "Users can update their own training programs" ON public.training_programs
    FOR UPDATE
    TO authenticated
    USING (auth.uid() = user_id)
    WITH CHECK (auth.uid() = user_id);

-- RLS Policy: Users can delete their own training programs
CREATE POLICY "Users can delete their own training programs" ON public.training_programs
    FOR DELETE
    TO authenticated
    USING (auth.uid() = user_id);

-- Create trigger to automatically update the updated_at timestamp
CREATE OR REPLACE FUNCTION public.update_training_programs_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER training_programs_updated_at_trigger
    BEFORE UPDATE ON public.training_programs
    FOR EACH ROW
    EXECUTE FUNCTION public.update_training_programs_updated_at();

-- Create trigger to automatically extract program_name and total_duration_weeks from JSONB
CREATE OR REPLACE FUNCTION public.extract_training_program_fields()
RETURNS TRIGGER AS $$
BEGIN
    -- Extract program_name from JSONB
    NEW.program_name = NEW.program_details->>'programName';
    
    -- Extract total_duration_weeks from JSONB
    NEW.total_duration_weeks = (NEW.program_details->>'durationWeeksTotal')::INTEGER;
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER training_programs_extract_fields_trigger
    BEFORE INSERT OR UPDATE ON public.training_programs
    FOR EACH ROW
    EXECUTE FUNCTION public.extract_training_program_fields(); 